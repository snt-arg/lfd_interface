classDiagram
%% LFD Interface
    class LFDPlanner {
        +visualizePlan()
        +getPlan()
        +runViz()
        +runExec()
    }
    class LFDRecorder {
        +robotHasMoved()
        +record()
        +saveDemonstration()
    }
    class LFDTrainer {
        +loadDemonstration()
        +trainDemonstration()
    }
    class MoveitUtil {
        +getMoveGroup()
        +getVisualTools()
        +currentJointState()
        +visualizeTrajectory()
        +jointToPose()
        +currentPose()
        +VisualizePosePath()
        +PlanPath()
        +executePath()
        +PlanJointAction()
    }
    class LFDPipeline {
        +run()
    }


%% LFD Camera

    class Calibration {
        +transform()
        +_fill_pose_template()
        +_rotate_around_Z()
        +_normalize_angle()
    }

    class Cognex {
        +connect()
        +switch_job()
        +read()
        +_extract_pos()
        +_convert_units()
    }
    %% HandEye
    class DataCollection {
        +read_robot_pose()
        +read_camera_pose()
    }

    class Solver {
        +calculate_transformation()
        +solve()
    }

    class CameraActionServer {
        +run()
    }

    class CameraConfig {
        +read()
    }

%% LFD Program

    class  CameraProgram {
        +locate_target()
        +trigger()
    }

    class MotionProgram {
        +configure()
        +set_target()
        +joint_state_to_traj_points()
    }

    class RobotProgram {
        +pose_to_joint()
        +joint_to_pose()
    }

    class DMPProgram {
        +configure()
        +_set_default_target()
        +train()
        +visualize()
        +execute()
        +_fetch_demo()
        +demo_goal_joint()
        +run()
    }

    %% ABB Program
    class YumiProgram {
        +add_gripper()
        +write_motion()
        +execute_motion()
        +move_generic()
    }

    class YumiL {
        +move()
    }

    class YumiR {
        +move()
    }

    class YumiGripper {
        +moveto()
        +grasp()
    }

    %% Franka Program
    class FR3Program {
        +move()
    }

    class FrankaGripper {
        +moveto()
        +grasp()
    }

    %% Util
    class ForwardKinematics {
        +get_pose()
    }

    class InverseKinematics {
        +request_ik()
    }
    %% 
    class ProgramRunner {
        +set_camera()
        +set_motion_mode()
        +configure_motion()
        +move()
        +locate_target()
    }

    class YumiRunner {
        +set_motion_mode()
        +configure_motion()
        +configure_l_motion()
        +configure_r_motion()
        +locate_l_target()
        +locate_r_target()
        +move_l()
        +move_r()
        +move()
    }

%% LFD Storage

    class DemonstrationStorage {
        +save()
        +load()
    }

    class MetaDataStorage {
        +store_pos()
    }

    class SmootherStorage {
        +import_timing()
        +import_new_timing()
        +import_metadata()
        +import_tolerances()
        +import_waypoints()
        +import_original_traj()
        +import_pydrake_traj()
        +import_dmp_traj()
        +export_pydrake_traj()
        +export_timing()
        +export_waypoints()
    }


%% LFD DMP

    class DMPWrapper {
        +create_trajectory()
        +train()
        +init_dmp()
        +plan_dmp()
    }

    class DMPBBOWrapper {
        +train()
        +plan()
    }

%% LFD Smoothing

    class TrajectorySmoother {
        +__init__(config)
        +read_demo_ros(demonstration)
        +read_demo_waypoints(demo_name)
        +run(timings=None, tolerances=None)
        +export_raw()
        -config
        -demo
        -robot
        -smoother
        -timings
        -result_traj
    }

   class TrajectoryOptimizer {
        +__init__(robot, config)
        +run(tag="opt")
        -input_demo()
        -_segment_demo()
        -_make_symbolic()
        -_create_sym_r(trajopt)
        -add_pos_bounds()
        -add_vel_bounds()
        -add_acc_bounds()
        -add_jerk_bounds()
        -add_duration_bound()
        -add_duration_cost()
        -init_trajopts()
        -add_jerk_cost()
        -_add_joint_constraint(trajopt, position, tolerance, ntime, rest=False)
        -add_joint_constraints()
        -add_joint_cp_error_cost()
        -_add_zerovel_constraint(trajopt, ntime)
        -_add_pose_constraint(trajopt, waypoint, tol_translation, tol_rotation, ntime, rest=False)
        -add_task_constraints()
        -add_vel_cost()
        -join_trajopts()
        +solve()
        -_solve(prog)
        +compile_trajectory()
        -set_waypoints(demo)
        -_reconstruct_trajectory(result, trajopt, t_offset)
        +plot_trajectory(composite_traj, tag="opt")
        +plot_trajectory_individually(composite_traj, tag="opt")
        +export_cps()
        -set_init_guess_cps(initial_guess)
        +export_waypoint_ts()
        +import_waypoints_ts(timings)
        -robot
        -config
        -demo
        -waypoints: List
        -trajopts: List
        -progs: List
        -sym_r: List
        -sym_rvel: List
        -sym_racc: List
        -sym_rjerk: List
        -nprog
        -result
        -success: bool
        -num_segments: int
        -timings: List
        -output_trajs: List
    }

    class SingleOptimizer {
        +__init__(robot, config, tolerances=None)
        +set_init_guess_cps(initial_guess)
        +add_task_constraints()
        +solve()
        -_solve(prog)
        +add_joint_cp_error_cost()
        +add_jerk_cost()
        +add_vel_cost()
        -tolerances
        -ntimings
        -jerk_cost
        -vel_cost
    }
    
    SingleOptimizer --|> TrajectoryOptimizer


    class RobotConfig {
        +__init__(robot, demo)
        +parse_from_file(filename: str)
        +parse(config: dict)
        +add_initial_guess(init_guess_cps=None, waypoints_ts=None)
        +add_solver(solver)
        -ref_vel_bound: Array
        -demo
        -num_control_points: int
        -bspline_order: int
        -wp_per_segment: int
        -overlap: int
        -vel_bound: Array
        -acc_bound: Array
        -jerk_bound: Array
        -duration_bound
        -coeff_duration
        -coeff_jerk
        -coeff_joint_cp_error
        -coeff_vel
        -tol_joint
        -tol_translation
        -tol_rotation
        -doplot: bool
        -solver_log: str
        -init_guess_cps
        -waypoints_ts
        -solver
    }

    class FR3Config {
        +__init__(robot, demo)
        -ref_acc_bound: Array
        -ref_jerk_bound: Array
    }

    class YumiConfig {
        +__init__(robot, demo)
        -ref_acc_bound: Array
        -ref_jerk_bound: Array
    }

    FR3Config --|> RobotConfig
    YumiConfig --|> RobotConfig

    class Demonstration {
        +__init__()
        +filter(thr_translation: float = 0.1, thr_angle: float = 0.1)
        +apply_custom_index(indices: List[int])
        +pose_diff(p1, q1, p2, q2) float, float
        +divisible_by(n: int, overlap: int = 0)
        +reshape(step: int, overlap: int = 0)
        +split_into_segments(waypoints, n: int, overlap: int = 0) Array
        +read_from_pickle(filename: str)
        +read_from_ros(demonstration)
        +export_waypoints(demo_name: str)
        +read_from_waypoints(demo_name: str)
        +read_raw(ts, ys, positions, orientations)
        +export_to_ros(demo_template)
        -ts: Array
        -ys: Array
        -positions: Array
        -orientations: Array
        -length: int
        -num_q: int
        -num_segments: int
    }

    class IKSolver {
        +__init__(config)
        +run(position, orientation, q_init=None)
        -visualize(q)
        -config
        -robot
        -ik_solver
        -prog
    }


    class DrakeRobot {
        +__init__(pkg_xml, urdf_path, base_frame, gripper_frame, home_pos)
        -add_robot(home_pos, base_frame)
        +create_waypoint(name, position)
        +visualize(q=None)
        -urdf_path: str
        -pkg_path: str
        -meshcat
        -builder
        -plant
        -scene_graph
        -robot
        -visualizer
        -collision_visualizer
        -diagram
        -context
        -plant_context
        -num_q: int
        -q0
        -gripper_frame
    }

    class FR3Drake {
        +__init__(pkg_xml, urdf_path, base_frame="fr3_link0", gripper_frame="fr3_link8", home_pos=...)
    }

    class YumiDrake {
        +__init__(pkg_xml, urdf_path, left_arm=True, base_frame="yumi_base_link", gripper_frame=None, home_pos=None)
    }

    FR3Drake --|> DrakeRobot
    YumiDrake --|> DrakeRobot


    class IKServer {
        +__init__(robot_ns, name)
        +handle_request(req)
        -ik_cb()
        -solve_ros(end_effector_pose: Pose, q_init: JointTrajectoryPoint)
        -solve(position, orientation, q_init=None)
        -ik_flag: bool
        -service
        -solver: IKSolver
        -req
        -q
    }

    class PlanPoseActionServer {
        +__init__(robot_ns, name, ik_server)
        +execute_cb(goal: PlanPoseGoal)
        -ik_cb()
        -action_name: str
        -ik_server: IKServer
        -_as_planpose
        -_ac_planjoint
        -ik_flag: bool
        -goal
        -_feedback: PlanPoseFeedback
        -_result: PlanPoseResult
    }
